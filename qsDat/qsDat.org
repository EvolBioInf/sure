#+begin_export latex
\section{Real Data}
We have seen how to simulate samples of target and neighbor sequences
with \ty{stan}. Given such data, we can use \ty{kec} to extract the
expected difference between targets and neighbors from it, and we can
use \ty{fur} to extract the intersection of the difference. This gives
us confidence to now turn to real data.

As an example of real data we picked the bacterium \emph{Legionella
pneumophila}, which causes legionaires' disease in humans, a form of
pneumonia. Apart from its medical importance, we picked
\emph{L. pneumophila} as our example species for its suitable sample
size---not too large, not too small---and the appearance of a common
problem in target/neighbor analyses, the incongruence between taxonomy
and phylogeny.
\subsection*{Download Genomes}
We find the genomes available for \emph{L. pneumoniae} and its close
relatives using programs from the Neighbors
package\footnote{\ty{github.com/evolbioinf/neighbors}}. These are
based on an \ty{sqlite} database, \ty{neidb}. To keep this tutorial
stable, we use a version of \ty{neidb} built on October 8, 2024. If
you would like to work with the latest version of the NCBI taxonomy,
the Neighbors documentation contains a description of how to build
\ty{neidb} from scratch, which takes a few minutes. We, however,
download a compressed verion of the pre-built database and save it to
the name \ty{neidb\_08\_oct\_24.bz2}.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  url="owncloud.gwdg.de/index.php/s/ppwwPU5zppLkV2q/download"
  wget "https://${url}" -O neidb_08_oct_24.bz2
#+end_src
#+begin_export latex
We decompress the database.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  bunzip2 neidb_08_oct_24.bz2
#+end_src
#+begin_export latex
We look up the taxon ID of \emph{L pneumophila} using the program
\ty{taxi} (Neighbors) and the full name of the type strain of
\emph{L. pneumophila},
\begin{center}
  Legionella pneumophila subsp. pneumophila str. Philadelphia 1
\end{center}
#+end_export
#+begin_src sh <<qsDat.sh>>=
  name="Legionella pneumophila subsp. pneumophila"
  name="$name str. Philadelphia 1"
  taxi "$name" neidb_08_oct_24
#+end_src
#+begin_export latex
\begin{verbatim}
# ID      Parent  Name
  272624  91891   Legionella pneumophila subsp. ...
\end{verbatim}
So the taxon ID of our type strain is 272624. Let's take a look at the
taxonomy of this taxon by climbing up the lineage of its ancestors
using the program \ty{ants} (Neighbors).
#+end_export
#+begin_src sh <<qsDat.sh>>=
  ants 272624 neidb_08_oct_24
#+end_src
#+begin_export latex
\small
\begin{verbatim}
# Back  ID      Name                                         Rank
  10    1       root                                         no rank
  9     131567  cellular organisms                           no rank
  8     2       Bacteria                                     superkingdom
  7     1224    Pseudomonadota                               phylum
  6     1236    Gammaproteobacteria                          class
  5     118969  Legionellales                                order
  4     444     Legionellaceae                               family
  3     445     Legionella                                   genus
  2     446     Legionella pneumophila                       species
  1     91891   Legionella pneumophila subsp. p...           subspecies
  0     272624  Legionella pneumophila subsp. p... str. ...  strain
\end{verbatim}
\normalsize We can see that the taxon ID of our target is 91891. As
neighbors we take its closest relatives. We look up the genomes of
targets and neighbors with the \ty{neighbors} program
(Neighbors). Using the \ty{-g} option, we restrict the output of
\ty{neighbors} to the taxa with genome sequences.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  printf 91891 | neighbors -g neidb_08_oct_24
#+end_src
#+begin_export latex
\begin{verbatim}
# MRCA(targets): 91891, Legionella pneumophila subsp. pneumophila
# MRCA(targets+neighbors): 446, Legionella pneumophila
# Type  Taxon-ID  Name                        Genomes
t       91891     Legionella pneumophila ...  GCA_022870105.1...
tt      272624    Legionella pneumophila ...  GCA_000008485.1
...
n       66976     Legionella pneumophila ...  GCA_001685545.1...
  ...
\end{verbatim}
The output of \ty{neighbors} consists of the target we entered
(\ty{t}), the extra targets found by the program (\ty{tt}), and the
neighbors (\ty{n}). For each taxon ID the accessions of the
corresponding genome assemblies are listed, \ty{GCA\_*}. In order to
download these assemblies, we run \ty{neighbors} in list mode and
store the output in the file \ty{acc.txt}.
#+end_export
#+begin_src sh <<qsDat.sh>>= 
  printf 91891 |
      neighbors -l neidb_08_oct_24 > acc.txt
#+end_src
#+begin_export latex
The file \ty{acc.txt} contains two columns of data, the sample type,
either target (\ty{t}) or neighbor (\ty{n}), and the assembly
accession.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  head acc.txt
#+end_src
#+begin_export latex
\begin{verbatim}
# Sample  Accession
t         GCA_022870105.1
t         GCA_003004275.1
t         GCA_001592705.1
...
\end{verbatim}
We count the targets and neighbors and find 49 targets and 103
neighbors.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  grep -c '^t' acc.txt
  grep -c '^n' acc.txt
#+end_src
#+begin_export latex
To download the targets an neighbors, we separate their accessions and
store them in the files \ty{tacc.txt} and \ty{nacc.txt}.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  grep '^t' acc.txt | awk '{print $2}' > tacc.txt
  grep '^n' acc.txt | awk '{print $2}' > nacc.txt
#+end_src
#+begin_export latex
Now we can download the target and neighbor assemblies with the
program \ty{datasets} supplied by the
NCBI\footnote{\ty{www.ncbi.nlm.nih.gov/datasets/}}. We restrict its
output to ``complete'' genomes, exclude ``atypical'' genomes, download
the data in ``dehydrated'' form, and save the targets to \ty{tdata.zip} and
the neighbors to \ty{ndata.zip}.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  for a in t n; do
      datasets download genome accession \
	       --inputfile ${a}acc.txt \
	       --assembly-level complete \
	       --include genome \
	       --exclude-atypical \
	       --dehydrated \
	       --filename ${a}data.zip
  done
#+end_src
#+begin_export latex
We unzip the targets and neighbors, and rehydrate them.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  for a in t n; do
      unzip ${a}data.zip -d ${a}data
      datasets rehydrate --directory ${a}data
  done
#+end_src
#+begin_export latex
Our comparison of targets and neighbors only works if the targets form
a monophyletic group. To find out whether that's the case, we
calculate the phylogeny of the genomes we just downloaded. To prepare
for that, we move all target and neighbor genomes to the directory
\ty{all} and prefix the targets with \ty{t}, the neighbors with
\ty{n}.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  mkdir all
  for p in t n; do
      for a in ${p}data/ncbi_dataset/data/*/*.fna; do
	  b=$(basename $a)
	  mv $a all/${p}$b
      done
  done
#+end_src
#+begin_export latex
We have 21 targets and 21 neighbors. That's quite a reduction from the
49 target accessions and 103 neighbor accessions we started off
with. Apparently many of them were not assembled to level
``complete''.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  ls all/t* | wc -l
  ls all/n* | wc -l
#+end_src
#+begin_export latex
We calculate the pairwise evolutionary distances between our genomes
with \ty{phylonium}\footnote{github.com/evolbioinf/phylonium}, convert
the distances to a neighbor-joining phylogeny with \ty{nj} (Biobox),
midpoint-root the phylogeny with \ty{midRoot} (Biobox), and save the
phylogeny, which comes in Newick
format\footnote{\ty{phylipweb.github.io/phylip/newicktree.html}}, in
the file \ty{all.nwk}.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  phylonium all/* |
      nj |
      midRoot > all.nwk
#+end_src
#+begin_export latex
To make the phylogeny easier to read, we reduce the leaf labels of
targets and neighbors to \ty{t} and \ty{n}. Figure~\ref{fig:nei} shows
the resulting tree.
\begin{figure}
  \psfrag{ tx}{ t\rput(-6.3,-2.2){$T$}\rput(-6.3,-6.9){$N$}}
  \psfrag{ t}{t}
  \psfrag{ n}{n}
  \begin{center}
    \includegraphics{../qsDat/nei}
  \end{center}
  \caption{Phylogeny of taxonomic targets (\ty{t}) and neighbors
    (\ty{n}) for target \emph{Legionella pneumophila}
    subsp. pneumophila; the phylogenetic targets ($T$) contain six
    taxonomic neighbors that don't cluster with the phylogenetic
    neighbors ($N$).}\label{fig:nei}
\end{figure}
#+end_export
#+begin_src sh <<qsDat.sh>>=
  sed -E 's/([tn])[^a]*.fna/\1/g' all.nwk |
      plotTree
#+end_src
#+begin_export latex
The phylogeny in Figure~\ref{fig:nei} is neatly divided into two
clades. However, the clade dominated by targets also contains six
neighbors. So we lump these taxonomic neighbors with the phylogenetic
targets. To automatically divide the genomes between targets and
neighbors, we label the nodes in the phylogeny with the program
\ty{land} (Neighbors) and find that clade 16 is the target clade.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  land all.nwk | plotTree
#+end_src
#+begin_export latex
So we create a directory for the targets and use the program
\ty{pickle} (Neighbors) to pick the accessions of clade 16. The
corresponding genome sequences are linked symbolically into the
targets directory.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  mkdir targets
  land all.nwk |
      pickle 16 |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/targets/$a
      done
#+end_src
#+begin_export latex
We do the same for the complement of node 16 by using \ty{pickle -c}
to get the neighbors.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  mkdir neighbors
  land all.nwk |
      pickle -c 16 |
      grep -v '^#' |
      while read a; do
	  ln -s $(pwd)/all/$a $(pwd)/neighbors/$a
      done
#+end_src
#+begin_export latex
\subsection*{Calculate Difference}
The difference between target and neighbors consists of all target
regions that have no homologue among the neighbors. As with the
simulated data before, we can run the program \ty{kec} in
\emph{exlusion} mode to find these regions with minimal length
100. This time we use k-mers of length 15, as recommended in the
\ty{kec} tutorial. We save the result to \ty{diff.fasta} and sort it.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  kec e -t targets/ -n neighbors/ --min 100 -k 15 -o diff.fasta
  bash sortSeq.sh diff.fasta > tmp
  mv tmp diff.fasta
#+end_src
#+begin_export latex
We look at the head of \ty{diff.fasta}.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  head diff.fasta
#+end_src
#+begin_export latex
\small
\begin{verbatim}
>KEC no. 10000; len = 110; orig: CP016873.1 Legionella pneumophila...
ATAGCTCTAAATCCTCAGCACAGAGAAGCTCAATTTTACTTAGGTATTTTGCATTTGGAAGACAATTTAC
TCTCAGAAGCAGAACAGGCATTTCAAAAAGTGTTAGAGCA
>KEC no. 10000; len = 125; orig: CP021281.1 Legionella pneumophila...
CCAGTGGCATTGATCTGGCATTTGAATTTATTTCAACCATTGCTGGCAATGATGTTGCGGGAAAAGTGCA
GTTGCTTTTTGAATACTTCCCTGAGTGCAAGCTGTATTCCCAGCCTGCTATGGTG
>KEC no. 10000; len = 144; orig: CP061840.1 Legionella pneumophila...
ATAAATTAAATCAGATGCTTCGTTGATAAGTTCTTCTTTATTGTTGCTCACAGCAGCGATCACTGCTTCT
ACCGACTCTTCTCCTAATTTTTGAGCACATCGGTTCACACCAGAATCCAAGAGTTGAGCAGTATAACTGT
TTGG
\end{verbatim}
\normalsize
To sample the contents of \ty{diff.fasta}, we extract its first entry,
which consists of the first three lines.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  head -n 3 diff.fasta > diff1.fasta
#+end_src
#+begin_export latex
Now we compare this to the target set with the program \ty{sblast}
(Biobox), where we expect at least one, perhaps several hits.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  sblast diff1.fasta targets/*.fna |
      tail -n +2 |
      awk '{print $2}' |
      sort |
      uniq |
      wc -l
#+end_src
#+begin_export latex
In fact we find 27 hits, out of 27 possible. Now we compare
\ty{diff1.fasta} against the neighborhood, where we expect no hit. In
fact, we find 15 out of 15 possible hits. This region is not unique to
the target.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  sblast diff1.fasta neighbors/*.fna  |
      tail -n +2 |
      awk '{print $2}' |
      sort |
      uniq |
      wc -l
#+end_src
#+begin_export latex
\subsection*{Find Markers}
We now turn to determining the regions that appear in all targets but
are absent from the neighbors, we call them markers. The program for
finding them, \ty{fur}, works on a database that is computed with
\ty{makeFurDb}. In single-threaded mode this takes 18 s and 488 Mb of
RAM. In default multi-threaded mode the run time drops to 13 s and the
memory requirement grows to 3.3 GB.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  makeFurDb -t targets/ -n neighbors/ -d fur.db
#+end_src
#+begin_export latex
Now we run \ty{fur} and save the output in the file \ty{markers.fasta}
#+end_export
#+begin_src sh <<qsDat.sh>>=
  fur -d fur.db > markers.fasta
#+end_src
#+begin_export latex
Like with the output of \ty{kec}, we take the first sequence found,
which happens to occupy the first three lines of file
\ty{markers.fasta} and store it in \ty{markers1.fasta}.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  head -n 3 markers.fasta > markers1.fasta
#+end_src
#+begin_export latex
In the comparison to the targets we expect 27 hits, which is what we find.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  sblast markers1.fasta targets/*.fna |
      tail -n +2 |
      awk '{print $2}' |
      sort |
      uniq |
      wc -l
#+end_src
#+begin_export latex
In the comparison to the neighbors we expect no hit, which is also
what we find.
#+end_export
#+begin_src sh <<qsDat.sh>>=
  sblast markers1.fasta neighbors/*.fna
#+end_src
