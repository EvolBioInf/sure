#+begin_export latex
\section{Real Data}
Next we do some real genomics by detecting unique regions in real
data. Our example data set is the smallest human chromosome,
chromosome 21. We download the reference assembly of the human genome
and its annotations in ``dehydrated'' form.
#+end_export
#+begin_src sh <<qDat.sh>>=
  datasets download genome accession GCF_000001405.40 \
	   --include genome,gff3 \
	   --dehydrated
#+end_src
#+begin_export latex
We unzip the data set and rehydrate it. Since we are downloading
4.6\,GB of data, this can take a while, a bit over two minutes in our
case.
#+end_export
#+begin_src sh <<qDat.sh>>=
  unzip ncbi_dataset.zip
  datasets rehydrate --directory .
#+end_src
#+begin_export latex
We move the genome sequence and its annotation file to convenient
names.
#+end_export
#+begin_src sh <<qDat.sh>>=
  path="ncbi_dataset/data/GCF_000001405.40"
  path="$path/GCF_000001405.40_GRCh38.p14_genomic.fna"
  mv  $path hs.fna
  mv ncbi_dataset/data/GCF_000001405.40/genomic.gff hs.gff
#+end_src
#+begin_export latex
The accessions of reference assemblies have prefix \ty{NC}, so we list
them to find the accession of chromosome 21, \ty{NC\_000021.9}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep '^>' hs.fna | grep NC
#+end_src
#+begin_export latex
We extract chromosome 21 using the program \ty{getSeq} (Biobox) and
save it to the file \ty{chr21.fna}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  getSeq NC_000021.9 hs.fna > chr21.fna
#+end_src
#+begin_export latex
We count the 46.7\,Mb of chromosome 21 using the program \ty{cres}
(Biobox).
#+end_export
#+begin_src sh <<qDat.sh>>=
  cres chr21.fna
#+end_src
#+begin_export latex
\begin{verbatim}
Total: 46709983
Residue Count   Fraction
A       6975989 0.149
C       5249097 0.112
G       5245212 0.112
M       2       4.28e-08
N       6621361 0.142
R       1       2.14e-08
T       6989818 0.15
a       4844675 0.104
c       2936147 0.0629
g       2981169 0.0638
t       4866512 0.104
\end{verbatim}
The residues in lower case indicate repeats, while \ty{N} indicates an
unknown nucleotide. 14.2\% of chromosome 21 are still unknown.
#+end_export
#+begin_export latex
\subsection*{Mappability without Mismatches}
We calculate the \ty{genmap} index of chromosome 21. This takes 56\,s
and 1.4\,GB of RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap index -F chr21.fna -I chr21_gm.idx
#+end_src
#+begin_export latex
Then we calculate the mappability as before, which takes 20\,s and uses
0.3\,GB of RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap map -I chr21_gm.idx/ -K 15 -E 0 -O chr21_gm.out -t 
#+end_src
#+begin_export latex
We carry out the sliding window analysis of chromosome 21 with 10\,kb
windows, and save the values.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tail -n +2 chr21_gm.out.txt |
      tr ' ' '\n' |
      sw -w 10000 > chr21.map
#+end_src
#+begin_export latex
To pick unique regions on chromosome 21, we calculate the mappability
threshold like we did for the simulated data. So we need to randomize
the sequence of chromosome 21. However, we saw that the sequence
contains many unknown nucleotides, \ty{N}s, so we remove these before
we randomize the sequence. Removing \ty{N}s creates empty lines, which
we remove and then re-wrap the sequence before we randomize the
resulting sequence and store it as \ty{chr21r.fna}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tr -d N < chr21.fna |
      grep -v '^$' |
      randomizeSeq |
      wrapSeq > chr21r.fna
#+end_src
#+begin_export latex
Then we index the randomized sequence and calculate its mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap index -F chr21r.fna -I chr21r_gm.idx
  genmap map -I chr21r_gm.idx/ -K 15 -E 0 -O chr21r_gm.out -t 
#+end_src
#+begin_export latex
We carry out the sliding window analysis of the mappability values and
pick their 5\,\% quantile. Given that there are 40,079 windows, 5\,\%
quantile is entry number
\[
40079/100\times 5\approx 2004.
\]
This turns out to be 0.9388.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tail -n +2 chr21r_gm.out.txt |
      tr ' ' '\n' |
      sw -w 10000 |
      cut -f 3 |
      sort -n |
      head -n 2004 |
      tail -n 1
#+end_src
#+begin_export latex
However, if we look for unique regions with this threshold, we find
none.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 0.9388 chr21.map
#+end_src
#+begin_export latex
\subsection*{Mappability with One Mismatch}
The program \ty{genmap} allows the rapid computation of from matches
of length $k$ with $e$ errors, the so-called $(k,e)$
mappability~\cite{poc20:gen}. With $e=0$ we found no unique
regions. To we investigate what happens with $e=1$, we rerun the
mapping step, which takes 149\,s and 270\,MB of RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap map -I chr21_gm.idx/ -K 15 -E 1 -O chr21_gm_1.out -t
#+end_src
#+begin_export latex
We run the sliding window analysis on the new $(15,1)$ mappability
data.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tail -n +2 chr21_gm_1.out.txt |
      tr ' ' '\n' |
      sw -w 10000 > chr21_1.map
#+end_src
#+begin_export latex
To pick unique regions, we need to calculate a new threshold for the
$(15,1)$ data. For this purpose, we rerun the mapping of the index of
the randomized chromosome 21.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap map -I chr21r_gm.idx/ -K 15 -E 1 -O chr21r_gm_1.out -t
#+end_src
#+begin_export latex
We run the sliding window analysis on the random mappability data and
pick the 5\,\% quantile, as before. Our mappability threshold is now
0.2416.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tail -n +2 chr21r_gm_1.out.txt |
      tr ' ' '\n' |
      sw -w 10000 |
      cut -f 3 |
      sort -n |
      head -n 2004 |
      tail -n 1
#+end_src
#+begin_export latex
With this threshold we do find unique regions, which are returned as
four columns: input, start, end, and average mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 0.2416 chr21_1.map | head
#+end_src
#+begin_export latex
\begin{verbatim}
stdin   9063001         9078000         0.2567
stdin   14006001        14016000        0.2449
stdin   14067001        14081000        0.2585
stdin   15060001        15074000        0.2452
stdin   23960001        23970000        0.2443
stdin   26835001        26854000        0.2738
stdin   26958001        26975000        0.2609
stdin   29297001        29307000        0.2426
stdin   31550001        31567000        0.2648
stdin   31866001        31883000        0.251
\end{verbatim}
We store the unique regions in the file \ty{map.txt}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 0.2416 chr21_1.map > map.txt
#+end_src
#+begin_export latex
The file \ty{map.txt} contains 107 entries.
#+end_export
#+begin_src sh <<qDat.sh>>=
  wc -l map.txt
#+end_src
#+begin_export latex
The unique regions picked based on the mappability sum to 2.0\,Mb, or
roughly 4,\% of the 46.7\,Mb of chromosome 21.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '{l=$3-$2+1;s+=l}END{print s}' map.txt
#+end_src
#+begin_export latex
\begin{verbatim}
2039000
\end{verbatim}
#+end_export
#+begin_export latex
Given that we found no unique regions with $(15,0)$ mappability and a
2.0\,Mb of candidate unique regions with $(15,1)$ mappability, we
should check the uniqueness of the regions we just picked.

\subsection*{Assessing Uniqueness}
To assess the uniqueness of the regions we just picked, we cut them
from chromosome 21, blast them against chromosome 21, and calculate
the fraction of hits outside the original query. Ideally, this
fraction should be zero. We begin by cutting out the 107 regions we
just picked by running the program \ty{cutSeq} on every region.
#+end_export
#+begin_src sh <<qDat.sh>>=
  while read query start end map; do
      cutSeq -r $start-$end chr21.fna
  done < map.txt > map.fasta
#+end_src
#+begin_export latex
We double-check we have extracted 107 regions
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep -c '^>' map.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
107
\end{verbatim}
that amount to 2.0\,Mb.
#+end_export
#+begin_src sh <<qDat.sh>>=
  cres map.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
Total: 2039000
...
\end{verbatim}
#+end_export
#+begin_export latex
Before we can run Blast, we need to make sure that the fragments we
just generated all have distinct names. The name of a sequence is the
part of the header up to the first whitespace. We should have 107
distinct names, but in fact they are all the same, the accession of
chromosome 21.
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep '^>' map.fasta |
      awk '{print $1}' |
      sort |
      uniq
#+end_src
#+begin_export latex
\begin{verbatim}
>NC_000021.9
\end{verbatim}
#+end_export
#+begin_export latex
So we give each sequence in \ty{map.fasta} a unique name, $mx$, where
$x$ are consecutive numbers, $x=1,2,...,107$. We save the renamed
files to the temporary file \ty{t} and then rename that
\ty{map.fasta}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '/^>/{printf ">m%d\n", ++c}!/^>/{print}' map.fasta > t
  mv t map.fasta
#+end_src
#+begin_export latex
Now the 107 sequences in \ty{map.fasta} all have distinct names.
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep '^>' map.fasta |
	awk '{print $1}' |
	sort |
	uniq |
	wc -l
#+end_src
#+begin_export latex
To further prepare the Blast run, we convert the sequence of
chromosome 21 to a Blast database using the program \ty{makeblastdb}
from the Blast package.
#+end_export
#+begin_src sh <<qDat.sh>>=
  makeblastdb -in chr21.fna -out chr21 -dbtype nucl
#+end_src
#+begin_export latex
We blast the entries of \ty{map.fasta} and store the requested tabular
output (\ty{-outfmt 6}) in \ty{map.blast}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  blastn -query map.fasta -db chr21 -outfmt 6 > map.blast
#+end_src
#+begin_export latex
Next we calculate the percent false prediction,
\[
f_{\rm p}=\frac{\mbox{false prediction}}{\mbox{total prediction}}\times 100,
\]
where the the $\mbox{false prediction}$ the number of bases outside
the original query, and the $\mbox{total prediction}$ is the length of
the query in base pairs. This calculation is implemented in the
program \ty{pf.awk}, which we still need to write. It says $f_{\rm p}$
is 10.94\,\% for $(15,1)$ mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk -f ../scripts/fp.awk map.blast
#+end_src
#+begin_export latex
\begin{verbatim}
Total:                 2039000
False:                  223013 
False_prediction_rate:   10.94 %
\end{verbatim}
We concentrate on the region with the highest mappability, the 31\,kb
of region 36,686,001--36,717,000.
#+end_export
#+begin_src sh <<qDat.sh>>=
  sort -k 4 -n map.txt |
      tail -n 1
#+end_src
#+begin_export latex
\begin{verbatim}
stdin 36686001 36717000 0.319
\end{verbatim}
#+end_export
#+begin_export latex
To annotate this unique region, we extract the genes that intersect it
from the annotation file.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '$1=="NC_000021.9" && $3=="gene"' hs.gff |
      awk '$4<=36717000 && $5>=36686001'
#+end_src
#+begin_export latex
This gives two long non-coding RNAs at 36,632,681--36,698,991
(accession LOC105369308) and 36,700,516-36,709,131 (LOC107985492), and
the gene encoding the transcription factor SIM2 located on the forward
strand at 36,699,115--36,749,917. SIM2 is a master regulator of
neuronal development and is located in the chromosomal region on
chromosome 21 critical for the development of Down
syndrome~\cite{dah95:dow, but22:cha}.
#+end_export
#+begin_export latex
\subsection*{Complexity}
Having calculated the mappability with \ty{genmap}, we next calculate
the match complexity with \ty{macle}. We begin by indexing chromosome
21, which takes 18\,s and 3.1\,GB of RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  macle -s chr21.fna > chr21_ma.idx
#+end_src
#+begin_export latex
From the \ty{macle} index we extract the match complexity values in 10
kb windows, which takes less than a second and 0.4\,GB RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  macle -w 10000 chr21_ma.idx > chr21.cm
#+end_src
#+begin_export latex
To find unique regions in chromosome 21, we calculate the $\cm$
threshold. So we look up the length and the
GC content of chromosome 21 from the \ty{macle} index.
#+end_export
#+begin_src sh <<qDat.sh>>=
  macle -l chr21_ma.idx
#+end_src
#+begin_export latex
\begin{verbatim}
name:   chr21.fna
len:    46709983
gc:     0.4094
...
\end{verbatim}
We feed these values to \ty{mantile}, and find a threshold of 0.9951.
#+end_export
#+begin_src sh <<qDat.sh>>=
  mantile -l 46709983 -g 0.4094 -w 10000 -p 0.05
#+end_src
#+begin_export latex
With this threshold in hand, we extract the unique regions based on
complexity from chromosome 21 and store them in file \ty{com.txt}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 0.9951 chr21.cm > com.txt
#+end_src
#+begin_export latex
We count the 33 regions,
#+end_export
#+begin_src sh <<qDat.sh>>=
  wc -l com.txt
#+end_src
#+begin_export latex
that sum to 442\,kb.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '{l=$3-$2+1;s+=l}END{print s}' com.txt
#+end_src
#+begin_export latex
We aim to compute the false prediction rate of \ty{macle}, so we cut
out the regions just identified and store them in \ty{com.fasta}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  while read query start end cm; do
      cutSeq -r $start-$end chr21.fna
  done < com.txt > com.fasta
#+end_src
#+begin_export latex
We double check we have extracted 33 regions,
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep -c '^>' com.fasta
#+end_src
#+begin_export latex
and contain 442\,kb.
#+end_export
#+begin_src sh <<qDat.sh>>=
  cres com.fasta
#+end_src
#+begin_export latex
We rename the putative unique regions $cx$, where $x=1,2,...,33$.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '/^>/{printf ">c%d\n", ++c}!/^>/{print}' com.fasta > t
  mv t com.fasta
#+end_src
#+begin_export latex
We blast the candidate unique regions against chromosome 21 and store
the result in \ty{com.blast}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  blastn -query com.fasta -db chr21 -outfmt 6 > com.blast
#+end_src
#+begin_export latex
The false prediction rate of \ty{macle} is 1.46\,\%, only 13\,\% of
the false prediction rate from $(15,1)$ mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk -f ../scripts/fp.awk com.blast
#+end_src
#+begin_export latex
\begin{verbatim}
Total:                 442000
False:                   6461
False_prediction_rate:   1.46 %
\end{verbatim}
Among the putative unique regions we pick the highest scoring one,
which consists of the 26\,kb between 36,688,001 and 36,714,000. This
is fully contained in the 31\,kb region with the highest mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 0.9951 chr21.cm |
      sort -n -k 4 |
      tail -n 1
#+end_src
#+begin_export latex
\begin{verbatim}
NC_000021.9 36688001 36714000 1.015
\end{verbatim}
#+end_export
#+begin_export latex
So let's plot $\cm$ and the mappability in the 200\,kb surrounding our
unique region, 36,588,001--36,814,000. We first extract the $\cm$
values and label them ``c'', then the mappbability labeled ``m''.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '$2>=36588001 && $2<=36814000 {print $2/1000000, $3, "c"}' \
      chr21.cm > chr21.dat
  awk '$2>=36588001 && $2<=36814000 {print $2/1000000, $3, "m"}' \
      chr21_1.map >> chr21.dat
#+end_src
#+begin_export latex
Now we annotate the graph by adding the $\cm$ threshold, ``tc'',
the mappability threshold, ``tm'', the unique region from complexity,
``uc'', the unique region from mappability, ``um'', and the coordinates
of the \emph{SIM2} gene, ``s''.
#+end_export
#+begin_src sh <<qDat.sh>>=
  echo "36.588001 0.9951 tc" >> chr21.dat
  echo "36.814000 0.9951 tc" >> chr21.dat
  echo "36.588001 0.2416 tm" >> chr21.dat
  echo "36.814000 0.2416 tm" >> chr21.dat
  echo "36.688001 0.2 uc"  >> chr21.dat
  echo "36.714000 0.2 uc"  >> chr21.dat
  echo "36.686001 0.15 um" >> chr21.dat
  echo "36.717000 0.15 um" >> chr21.dat
  echo "36.699115 0.1 s" >> chr21.dat
  echo "36.749917 0.1 s" >> chr21.dat
#+end_src
#+begin_export latex
Figure~\ref{fig:chr21} shows a slightly edited plot of our region. The mappability
and $\cm$ are closely correlated, though the $\cm$ has the advantage
that we can set a threshold that allows us to pick unique regions.

For \ty{genmap}, threshold computation evidently still needs to be
developed. If we lowered the mappability threshold from 0.9388 to
0.92, the longest interval we'd pick would be 16\,kb in the region
36,692,001--36,708,000, also intersecting the SIM gene (not shown).
\begin{figure}
  \begin{center}
    \includegraphics[width=0.8\textwidth]{../qDat/chr21}
  \end{center}
  \caption{Two measures of uniqueness along a portion of human
    chromosome 21, \emph{Complexity} ($\cm$) and the
    \emph{Mappability}; the dashed lines show the respective
    thresholds; the promoter and 5' region of the SIM2 \emph{Gene} is
    intersected by the \emph{Unique region}.}\label{fig:chr21}
\end{figure}
#+end_export
#+begin_src sh <<qDat.sh>>=
  plotLine -Y "0:1.1" -x "Position (Mb)" -y "Uniqueness" chr21.dat
#+end_src
