#+begin_export latex
\section{Real Data}
Next we do some real genomics by detecting unique regions in real
sequences. Our example sequence is the smallest human chromosome,
chromosome 21. We download the reference assembly of the human genome
and its annotations in ``dehydrated'' form.
#+end_export
#+begin_src sh <<qDat.sh>>=
  datasets download genome accession GCF_000001405.40 \
	   --include genome,gff3 \
	   --dehydrated
#+end_src
#+begin_export latex
We unzip the data set and rehydrate it. Since we are downloading
4.6\,GB of data, this can take a while, a bit over two minutes in our
case.
#+end_export
#+begin_src sh <<qDat.sh>>=
  unzip ncbi_dataset.zip
  datasets rehydrate --directory .
#+end_src
#+begin_export latex
We move the genome sequence and its annotation file to convenient
names.
#+end_export
#+begin_src sh <<qDat.sh>>=
  path="ncbi_dataset/data/GCF_000001405.40"
  path="$path/GCF_000001405.40_GRCh38.p14_genomic.fna"
  mv $path hs.fna
  mv ncbi_dataset/data/GCF_000001405.40/genomic.gff hs.gff
#+end_src
#+begin_export latex
The accessions of reference assemblies have prefix \ty{NC}, so we list
them to find the accession of chromosome 21, \ty{NC\_000021.9}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep '^>' hs.fna | grep NC
#+end_src
#+begin_export latex
We extract chromosome 21 using the program \ty{getSeq} (Biobox) and
save it to the file \ty{chr21.fna}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  getSeq NC_000021.9 hs.fna > chr21.fna
#+end_src
#+begin_export latex
We count the 46.7\,Mb of chromosome 21 using the program \ty{cres}
(Biobox).
#+end_export
#+begin_src sh <<qDat.sh>>=
  cres chr21.fna
#+end_src
#+begin_export latex
\begin{verbatim}
Total: 46709983
Residue Count   Fraction
A       6975989 0.149
C       5249097 0.112
G       5245212 0.112
M       2       4.28e-08
N       6621361 0.142
R       1       2.14e-08
T       6989818 0.15
a       4844675 0.104
c       2936147 0.0629
g       2981169 0.0638
t       4866512 0.104
\end{verbatim}
The residues in lower case indicate repeats, while \ty{N} indicates an
unknown nucleotide; 14.2\% of chromosome 21 are still unknown.
#+end_export
#+begin_export latex
\subsection*{The $(15,0)$-Mappability}
We calculate the \ty{genmap} index of chromosome 21. This takes 56\,s
and 1.4\,GB of RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap index -F chr21.fna -I chr21_gm.idx
#+end_src
#+begin_export latex
Then we calculate the mappability as before, which takes 20\,s and uses
0.3\,GB of RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap map -I chr21_gm.idx/ -K 15 -E 0 -O chr21_gm.out -t 
#+end_src
#+begin_export latex
We carry out the sliding window analysis of chromosome 21 with 10\,kb
windows, and save the values.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tail -n +2 chr21_gm.out.txt |
      tr ' ' '\n' |
      sw -w 10000 > chr21.map
#+end_src
#+begin_export latex
To pick unique regions on chromosome 21, we calculate the mappability
threshold like we did for the simulated data. So we need to randomize
the sequence of chromosome 21. However, we saw that the sequence
contains many unknown nucleotides, \ty{N}s, so we remove these before
we randomize the sequence. Removing \ty{N}s creates empty lines, which
we remove and then re-wrap the sequence before we randomize the
resulting sequence and store it as \ty{chr21r.fna}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tr -d N < chr21.fna |
      grep -v '^$' |
      randomizeSeq |
      wrapSeq > chr21r.fna
#+end_src
#+begin_export latex
Then we index the randomized sequence and calculate its mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap index -F chr21r.fna -I chr21r_gm.idx
  genmap map -I chr21r_gm.idx/ -K 15 -E 0 -O chr21r_gm.out -t 
#+end_src
#+begin_export latex
We carry out the sliding window analysis of the mappability values and
pick their 5\,\% quantile. Given that there are 40,079 windows, the
5\,\% quantile is entry number
\[
40079/100\times 5\approx 2004.
\]
This turns out to be 0.9388.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tail -n +2 chr21r_gm.out.txt |
      tr ' ' '\n' |
      sw -w 10000 |
      cut -f 3 |
      sort -n |
      head -n 2004 |
      tail -n 1
#+end_src
#+begin_export latex
However, if we look for unique regions with this threshold, we find
none.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 0.9388 chr21.map
#+end_src
#+begin_export latex
\subsection*{The $(50,1)$-Mappability}
The program \ty{genmap} allows the rapid computation of mappability
from matches of length $k$ with $e$ errors, the so-called $(k,e)$
mappability~\cite{poc20:gen}. With the $(15,0)$-mappability we found
no unique regions. This prompted us to explore other
$(k,e)$-mappabilities. In the review which this tutorial accompanies,
settled on the $(50,1)$-mappability as a good combination between
yield and specificity.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap map -I chr21_gm.idx/ -K 50 -E 1 -O chr21_gm_1.out -t
#+end_src
#+begin_export latex
We run the sliding window analysis on the new $(50,1)$-mappability
data.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tail -n +2 chr21_gm_1.out.txt |
      tr ' ' '\n' |
      sw -w 10000 > chr21_1.map
#+end_src
#+begin_export latex
To pick unique regions, we need to calculate a new uniqueness
threshold for the $(50,1)$-data. For this purpose, we rerun the
mapping of the index of the randomized chromosome 21.
#+end_export
#+begin_src sh <<qDat.sh>>=
  genmap map -I chr21r_gm.idx/ -K 50 -E 1 -O chr21r_gm_1.out -t
#+end_src
#+begin_export latex
We run the sliding window analysis on the random mappability data and
pick the 5\,\% quantile, as before. Our mappability threshold is now
1.
#+end_export
#+begin_src sh <<qDat.sh>>=
  tail -n +2 chr21r_gm_1.out.txt |
      tr ' ' '\n' |
      sw -w 10000 |
      cut -f 3 |
      sort -n |
      head -n 2004 |
      tail -n 1
#+end_src
#+begin_export latex
With this threshold we do find unique regions, which are returned as
four columns: input, start, end, and average mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 1 chr21_1.map | head
#+end_src
#+begin_export latex
\begin{verbatim}
stdin 5217001 5227000 1
stdin 8561001 8572000 1
stdin 8621001 8636000 1
stdin 9063001 9078000 1
stdin 9563001 9590000 1
stdin 9738001 9751000 1
stdin 9918001 9932000 1
stdin 9933001 9943000 1
stdin 9953001 9963000 1
stdin 9982001 9992000 1
\end{verbatim}
We store the unique regions in the file \ty{map.txt}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 1 chr21_1.map > map.txt
#+end_src
#+begin_export latex
The file \ty{map.txt} contains 278 entries.
#+end_export
#+begin_src sh <<qDat.sh>>=
  wc -l map.txt
#+end_src
#+begin_export latex
The unique regions picked based on the mappability sum to 3.6\,Mb, or
roughly 8,\% of the 46.7\,Mb of chromosome 21.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '{l=$3-$2+1;s+=l}END{print s}' map.txt
#+end_src
#+begin_export latex
\begin{verbatim}
3573000
\end{verbatim}
#+end_export
#+begin_export latex
Given that we found no unique regions with $(15,0)$-mappability and
3.6\,Mb with $(50,1)$-mappability, we should check the true uniqueness
of the regions we just picked.

\subsection*{Assessing Uniqueness}
To assess the uniqueness of the 3.6\,Mb picked with $(50,
1)$-mappability, we cut them from chromosome 21, blast them against
chromosome 21, and calculate the fraction of hits outside the original
query. Ideally, this fraction should be zero. We begin by cutting out
the 278 regions we just picked by running the program \ty{cutSeq} on
every region.
#+end_export
#+begin_src sh <<qDat.sh>>=
  while read query start end map; do
      cutSeq -r $start-$end chr21.fna
  done < map.txt > map.fasta
#+end_src
#+begin_export latex
We double-check we have extracted 278 regions
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep -c '^>' map.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
278
\end{verbatim}
that amount to 3.6\,Mb.
#+end_export
#+begin_src sh <<qDat.sh>>=
  cres map.fasta
#+end_src
#+begin_export latex
\begin{verbatim}
Total: 3573000
...
\end{verbatim}
#+end_export
#+begin_export latex
Before we can run Blast, we need to make sure that the fragments we
just generated all have distinct names. The name of a sequence is the
part of the header up to the first whitespace. We should have 278
distinct names, but in fact they are all the same, the accession of
chromosome 21.
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep '^>' map.fasta |
      awk '{print $1}' |
      sort |
      uniq
#+end_src
#+begin_export latex
\begin{verbatim}
>NC_000021.9
\end{verbatim}
#+end_export
#+begin_export latex
So we give each sequence in \ty{map.fasta} a unique name, $mx$, where
$x$ are consecutive numbers, $x=1,2,...,107$. We save the renamed
sequences to the temporary file \ty{t} and then rename that
\ty{map.fasta}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '/^>/{printf ">m%d\n", ++c}!/^>/{print}' map.fasta > t
  mv t map.fasta
#+end_src
#+begin_export latex
Now the 278 sequences in \ty{map.fasta} all have distinct names.
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep '^>' map.fasta |
	awk '{print $1}' |
	sort |
	uniq |
	wc -l
#+end_src
#+begin_export latex
To further prepare the Blast run, we convert the sequence of
chromosome 21 to a Blast database using the program \ty{makeblastdb}
from the Blast package.
#+end_export
#+begin_src sh <<qDat.sh>>=
  makeblastdb -in chr21.fna -out chr21 -dbtype nucl
#+end_src
#+begin_export latex
We blast the 278 queries in \ty{map.fasta} and store the requested
tabular output (\ty{-outfmt 6}) in \ty{map.blast}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  blastn -query map.fasta -db chr21 -outfmt 6 > map.blast
#+end_src
#+begin_export latex
Next we calculate the specificity,
\[
s_{\rm p}=\frac{\mbox{true prediction}}{\mbox{total prediction}},
\]
where the $\mbox{true prediction}$ is the complement of the number of
bases outside the original query, and the $\mbox{total prediction}$ is
the length of the query in base pairs. This calculation is implemented
in the program \ty{sp.awk}, which we still need to write. It says
$s_{\rm p}$ is 0.95 for $(50,1)$ mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk -f ../scripts/sp.awk map.blast
#+end_src
#+begin_export latex
\begin{verbatim}
# Total  False      s_p
3573000 195422 0.945306
\end{verbatim}
#+end_export
#+begin_export latex
\subsection*{Complexity}
Having calculated the mappability with \ty{genmap}, we next calculate
the match complexity with \ty{macle}. We begin by indexing chromosome
21, which takes 18\,s and 3.1\,GB of RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  macle -s chr21.fna > chr21_ma.idx
#+end_src
#+begin_export latex
From the \ty{macle} index we extract the match complexity values in 10
kb windows, which takes less than a second and 0.4\,GB RAM.
#+end_export
#+begin_src sh <<qDat.sh>>=
  macle -w 10000 chr21_ma.idx > chr21.cm
#+end_src
#+begin_export latex
To find unique regions in chromosome 21, we calculate the $\cm$
threshold. So we look up the length and the
GC content of chromosome 21 from the \ty{macle} index.
#+end_export
#+begin_src sh <<qDat.sh>>=
  macle -l chr21_ma.idx
#+end_src
#+begin_export latex
\begin{verbatim}
name:   chr21.fna
len:    46709983
gc:     0.4094
...
\end{verbatim}
We feed these values to \ty{mantile}, and find the 5\,\% threshold of
0.9951.
#+end_export
#+begin_src sh <<qDat.sh>>=
  mantile -l 46709983 -g 0.4094 -w 10000 -p 0.025
#+end_src
#+begin_export latex
With this threshold in hand, we extract the unique regions based on
complexity from chromosome 21 and store them in file \ty{com.txt}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  merwin -w 10000 -t 0.9951 chr21.cm > com.txt
#+end_src
#+begin_export latex
We count the 33 regions,
#+end_export
#+begin_src sh <<qDat.sh>>=
  wc -l com.txt
#+end_src
#+begin_export latex
that sum to 442\,kb.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '{l=$3-$2+1;s+=l}END{print s}' com.txt
#+end_src
#+begin_export latex
We aim to compute the false prediction rate of \ty{macle}, so we cut
out the regions just identified and store them in \ty{com.fasta}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  while read query start end cm; do
      cutSeq -r $start-$end chr21.fna
  done < com.txt > com.fasta
#+end_src
#+begin_export latex
We double check we have extracted 33 regions,
#+end_export
#+begin_src sh <<qDat.sh>>=
  grep -c '^>' com.fasta
#+end_src
#+begin_export latex
and contain 442\,kb.
#+end_export
#+begin_src sh <<qDat.sh>>=
  cres com.fasta
#+end_src
#+begin_export latex
We rename the putative unique regions $cx$, where $x=1,2,...,33$.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '/^>/{printf ">c%d\n", ++c}!/^>/{print}' com.fasta > t
  mv t com.fasta
#+end_src
#+begin_export latex
We blast the candidate unique regions against chromosome 21 and store
the result in \ty{com.blast}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  blastn -query com.fasta -db chr21 -outfmt 6 > com.blast
#+end_src
#+begin_export latex
The specificity of \ty{macle} is 0.99, up from the specificity of 0.95
for the $(50,1)$-mappability.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk -f ../scripts/sp.awk com.blast
#+end_src
#+begin_export latex
\begin{verbatim}
# Total False      s_p
 442000  6461 0.985382
\end{verbatim}
#+end_export
#+begin_export latex
What is the intersection between the 442\,kb found with \ty{macle} and
the 3.6\,Mb found with \ty{genmap}? To find out, we use \ty{bedtools}
to intersect the two data sets. These take columns of data as input,
where the first three columns are sequence, start, and end. Now, the
sequence label in \ty{com.txt} is the accession, \ty{NC\_000021.9},
while that in \ty{map.txt} is \ty{stdin}. Clearly, intersecting
regions can only come from the same sequence, so we convert \ty{stdin}
to \ty{NC\_000021.9}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  sed 's/stdin/NC_000021.9/' map.txt > t
  mv t map.txt
#+end_src
#+begin_export latex
The intersection is calculated with the \ty{intersect} module of
\ty{bedtools}. We store its output in the file \ty{inter.txt}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  bedtools intersect -wo -a com.txt -b map.txt > inter.txt
#+end_src
#+begin_export latex
The file \ty{inter.txt} contains one row per overlapping region in the
$a$ file, \ty{com.txt}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  head -n 2 inter.txt
#+end_src
#+begin_export latex
\footnotesize
\begin{verbatim}
NC_000021.9  9064001  9078000      1 NC_000021.9  9063001  9078000 0.2567 13999
NC_000021.9 15058001 15073000 0.9976 NC_000021.9 15060001 15074000 0.2452 12999
\end{verbatim}
\normalsize
#+end_export
#+begin_export latex
Of the 33 regions in \ty{com.txt}, 29 overlapped with a region in
\ty{map.txt}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  wc -l inter.txt
#+end_src
#+begin_export latex
To find out the extent to which these 29 regions overlap, we note that
columns two and three are the start and end of the complexity interval
and the last column the length of the overlap. So we calculate that
our 29 focal complexity regions sum to 358\,kb that have a 90\,\%
overlap with the mappability regions.
#+end_export
#+begin_src sh <<qDat.sh>>=
  bedtools intersect -wo -a com.txt -b map.txt |
      awk '{l=$3-$2+1;t+=l;s+=$NF}END{print s, s/t*100}'
#+end_src
#+begin_export latex
\begin{verbatim}
357971 89.717
\end{verbatim}
The total overlap, including the two regions without any overlap, is
81\,\%.
#+end_export
#+begin_src sh <<qDat.sh>>=
  echo '357971 / 442000' | bc -l
#+end_src
#+begin_export latex
\begin{verbatim}
0.8098891402714932
\end{verbatim}
To find the two lone regions that don't overlap, we list the
complement of the intersection and store them in the file
\ty{lone.txt}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  bedtools intersect -v -a com.txt -b map.txt > lone.txt
#+end_src
#+begin_export latex
We make sure \ty{lone.txt} contains four regions.
#+end_export
#+begin_src sh <<qDat.sh>>=
  cat lone.txt
#+end_src
#+begin_export latex
\begin{verbatim}
NC_000021.9 42560001 42570000 0.9952
NC_000021.9 45012001 45022000 0.9952
NC_000021.9 45066001 45077000  1.002
NC_000021.9 45285001 45297000      1
NC_000021.9 34124001 34135000 0.9959
NC_000021.9 35316001 35326000 0.9952
\end{verbatim}
#+end_export
#+begin_export latex
The lone regions amount to 43\,kb.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '{l=$3-$2+1;s+=l}END{print s}' lone.txt
#+end_src
#+begin_export latex
So it seems as if \ty{macle} has uncovered 43 unique kb in chromosome
21 not contained in the mappability output. Given that the other 29
complexity regions are largely contained in the mappability result, we
should check the uniqueness of the four lone regions. So we cut them
from chromosome 21 and store them in the file \ty{lone.fasta}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  bedtools intersect -v -a com.txt -b map.txt |
      while read seq start end cm; do
	  cutSeq -r $start-$end chr21.fna
      done > lone.fasta
#+end_src
#+begin_export latex
We give the sequences unique names.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '/^>/{printf ">s%d\n", ++c}!/^>/{print}' lone.fasta > t
  mv t lone.fasta
#+end_src
#+begin_export latex
We blast the renamed sequences against chromosome 21 and store the
result in \ty{lone.blast}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  blastn -query lone.fasta -db chr21 -outfmt 6 > lone.blast
#+end_src
#+begin_export latex
The specificity of the lone regions is 97\,\%, which means these are
genuine unique regions not contained in the mappability output.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk -f ../scripts/sp.awk lone.blast
#+end_src
#+begin_export latex
\begin{verbatim}
# Total False      s_p
  43000  1275 0.970349
\end{verbatim}
From the putative unique regions we pick the one with the largest
overlap with the \ty{genmap} prediction, which consists of the 26\,kb
between 36,688,001 and 36,714,000. It fully contains the corresponding
mappability region, 36,691,001--36,709,000.
#+end_export
#+begin_src sh <<qDat.sh>>=
  sort -n -k 9 -r inter.txt |
      head
#+end_src
#+begin_export latex
\footnotesize
\begin{verbatim}
NC_000021.9 36688001 36714000  1.015 NC_000021.9 36691001 36709000 1 17999
NC_000021.9 33018001 33036000  1.014 NC_000021.9 33018001 33035000 1 16999
...
\end{verbatim}
\normalsize
To annotate this unique region, we extract the genes that intersect it
from the annotation file. This gives two long non-coding RNAs at
36,632,681--36,698,991 on the reverse strand (accession LOC105369308)
and 36,700,516-36,709,131 (LOC107985492) on the forward strand. It
also gives us the gene encoding the transcription factor SIM2 located
on the forward strand at 36,699,115--36,749,917. SIM2 is a master
regulator of neuronal development and its gene is located in the
chromosomal region on chromosome 21 critical for the development of
Down syndrome~\cite{dah95:dow, but22:cha}.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '$1=="NC_000021.9" && $3=="gene"' hs.gff |
      awk '$4<=36714000 && $5>=36686001'
#+end_src
#+begin_export latex
\scriptsize
\begin{verbatim}
NC_000021.9 BestRefSeq          gene 36632681 36698991 . - . ID=gene-LOC105369308...
NC_000021.9 BestRefSeq%2CGnomon gene 36699115 36749917 . + . ID=gene-SIM2...
NC_000021.9 Gnomon              gene 36700516 36709131 . + . ID=gene-LOC107985492...
\end{verbatim}
\normalsize
So let's plot $\cm$ and the mappability in the 200\,kb surrounding our
unique region, 36,588,001--36,814,000. We first extract the $\cm$
values and label them ``c'', then the mappbability labeled ``m''.
#+end_export
#+begin_src sh <<qDat.sh>>=
  awk '$2>=36588001 && $2<=36814000 {print $2/1000000, $3, "c"}' \
      chr21.cm > chr21.dat
  awk '$2>=36588001 && $2<=36814000 {print $2/1000000, $3, "m"}' \
      chr21_1.map >> chr21.dat
#+end_src
#+begin_export latex
Now we annotate the uniqueness graph by adding the $\cm$ threshold,
``tc'', the mappability threshold, ``tm'', the unique region from
complexity, ``uc'', the unique region from mappability, ``um'', and
the coordinates of the \emph{SIM2} gene, ``s''.
#+end_export
#+begin_src sh <<qDat.sh>>=
  echo "36.588001 1 tm" >> chr21.dat
  echo "36.814000 1 tm" >> chr21.dat
  echo "36.588001 0.9951 tc" >> chr21.dat
  echo "36.814000 0.9951 tc" >> chr21.dat
  echo "36.688001 0.65 uc"  >> chr21.dat
  echo "36.714000 0.65 uc"  >> chr21.dat
  echo "36.686001 0.625 um" >> chr21.dat
  echo "36.717000 0.625 um" >> chr21.dat
  echo "36.699115 0.6 s" >> chr21.dat
  echo "36.749917 0.6 s" >> chr21.dat
#+end_src
#+begin_export latex
We use the program \ty{plotLine} to plot the data we just
generated. Figure~\ref{fig:chr21} shows that the $(50,1)$ mappability
and complexity are correlated. We also see that based on
$(50,1)$ mappability, we predict more unique regions than based on
complexity.
\begin{figure}
  \begin{center}
    \includegraphics{../qDat/chr21}
  \end{center}
  \caption{Two measures of uniqueness along a portion of human
    chromosome 21, the complexity \emph{c} and the mappability
    \emph{m}; the long horizontal lines show the respective
    thresholds, \emph{tc} and \emph{tm}; the promoter and 5' region of
    the gene encoding the SIM2 protein, \emph{s}, is intersected by
    the unique region based on mappability, \emph{um}, and by that
    based on complexity, \emph{uc}.}\label{fig:chr21}
\end{figure}
#+end_export
#+begin_src sh <<qDat.sh>>=
  plotLine -x "Position (Mb)" -y "Uniqueness" chr21.dat
#+end_src
