#+begin_export latex
The program \ty{fp.awk} reads a table of Blast results, which consists
of twelve columns
\begin{enumerate}
\item query accession
\item subject accession
\item \% identity
\item alignment length
\item mismatches
\item gaps
\item query start
\item qery end
\item subject start
\item subject end
\item $E$-value
\item bit score
\end{enumerate}
Table~\ref{tab:blast} shows a slightly edited example Blast output.
\begin{table}
  \caption{Example Blast output.}\label{tab:blast}
  \begin{center}
  \resizebox{\textwidth}{!}{
    \begin{tabular}{ccrrrcrrrrcr}
    \hline
    q & s & i & l & m & g & q.s & q.e & s.s & s.e & $E$ & $S$\\\hline
      \input{../qDat/blast}\\
      \hline
    \end{tabular}
    }
  \end{center}
\end{table}
Notice the blocks of rows per query, m1, m2, and so on. Each block
starts with the long match to the original locus followed by false
predictions. So as our Awk program iterates across these lines, we
check each line and then compare the name of the current query with
that of the previous query to decide whether we are in the same query
as before or not. After every line has been parsed, we process the
last line and print the false prediction rate.

\bpr{pf.awk}{pr:fp}
#+end_export
#+begin_src awk <<fp.awk>>=
  {
    ##<<Check line, Pr. \ref{pr:fp}>>
    curQuery = $1
    ##<<Compare current and previous query, Pr. \ref{pr:fp}>>
    prevQuery = curQuery
  }
  END {
    ##<<Process last query, Pr. \ref{pr:fp}>>
    ##<<Print false prediction rate, Pr. \ref{pr:fp}>>
  }
#+end_src
#+begin_export latex
\epr
If the current line does not contain twelve fields, something is wrong
and we exit with a friendly message.
#+end_export
#+begin_src awk <<Check line, Pr. \ref{pr:fp}>>=
  if (NF != 12) {
    printf "Blast output should have twelve columns, not %d.\n", NF
    printf "Please check your input.\n"
    exit 1
  }
#+end_src
#+begin_export latex
If the current query is identical to the previous one, we have falsely
predicted material and mark that. Otherwise, we've found a new query
and respond to that. In either case we need the query start and end,
so we store that first.
#+end_export
#+begin_src awk <<Compare current and previous query, Pr. \ref{pr:fp}>>=
  qs = $7
  qe = $8
  if (curQuery == prevQuery) {
    ##<<Mark false prediction, Pr. \ref{pr:fp}>>
  } else {
    ##<<Respond to new query, Pr. \ref{pr:fp}>>
  }
#+end_src
#+begin_export latex
We mark false predictions by setting their positions to one in the
array \ty{query}.
#+end_export
#+begin_src awk <<Mark false prediction, Pr. \ref{pr:fp}>>=
  for (i = qs; i <= qe; i++)
    query[i] = 1
#+end_src
#+begin_export latex
If we found a new query, we summarize the previous query, if it
exists, and prepare for the new query.
#+end_export
#+begin_src awk <<Respond to new query, Pr. \ref{pr:fp}>>=
  if (NR > 1) {
    ##<<Summarize previous query, Pr. \ref{pr:fp}>>
  }
  ##<<Prepare new query, Pr. \ref{pr:fp}>>
#+end_src
#+begin_export latex
To summerize the query, we iterate across it and count its length,
\ty{len} its false predictions, \ty{fp}.
#+end_export
#+begin_src awk <<Summarize previous query, Pr. \ref{pr:fp}>>=
  for (i in query) {
    len++
    fp += query[i]
  }
#+end_src
#+begin_export latex
We prepare the new query by deleting all previous entries and
initializing the new entries to zero.
#+end_export
#+begin_src awk <<Prepare new query, Pr. \ref{pr:fp}>>=
  for (i in query)
    delete query[i]
  for (i = qs; i <= qe; i++)
    query[i] = 0
#+end_src
#+begin_export latex
At this point we have parsed all Blast results, but the last query
remains to be processed, which---as always---we do by summarizing the
previous query.
#+end_export
#+begin_src sh <<Process last query, Pr. \ref{pr:fp}>>=
  <<Summarize previous query, Pr. \ref{pr:fp}>>
#+end_src
#+begin_export latex
Now we are ready to print the rate of false predictions.
#+end_export
#+begin_src awk <<Print false prediction rate, Pr. \ref{pr:fp}>>=
  printf "Total: %d\n", len
  printf "False: %d\n", fp
  fp = fp / len * 100.0
  printf "False_prediction_rate: %.2f %\n", fp
#+end_src
